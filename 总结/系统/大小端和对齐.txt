## 小端法

    就是把数字的高位字节放在内存的高位的地址上 低位字节放在低位地址上
    x86 结构都是小端模式

    如 0x12345678 这个数字

    ------------------------------------------------------
    |  地址  |  0x0001  |  0x0002  |  0x0003  |  0x0004  |
    ------------------------------------------------------
    |  数据  |   0x78   |   0x56   |   0x34   |   0x12   |
    ------------------------------------------------------

## 大端法

    把数值的高位字节放在内存的低位地址上 把数值的地位字节放在内存的高位地址上


## 内存编址

    内存地址的最小单位是字节

    内存地址是按照字节编址的 一个字节一个地址 字节内部的比特位没有地址一说

## 内存对齐

    cpu 读取数据是按照块来读取的 比如 32 位系统每次读取 4 个字节的数据

    内存从 0 开始编址 所以 cpu 读取的数据类似于 0-3 地址的四个字节  4-7 地址的四个字节 四个四个读取
    如果你的数据在 2-5 地址上 那么 cpu 想获取你的数据 就得读两次内存
    0-3 地址读取出来 然后 4-7 地址读取出来 然后结合这两个块通过移位获得你的数据

    如果你的数据刚好是在 4 的倍数的内存上存储 那 cpu 就不需要读取两次
    所以在 32 位系统中说的对齐就是你的数据的开始地址存储在 cpu 刚好可以一次读取的地址上 也就是 4 的倍数的地址上
